#@author Auto gen by simple-dao-codegen, @time: ${.now}, 代码生成哈希校验码：[]，请不要修改和删除此行内容。
#
spring:
  application:
    name: ${moduleName}

  main:
    #允许Spring Bean循环应用
    allow-circular-references: true

  #文件上传限制
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 100MB

  cache:
#    type: redis
    # j2cache
    type: GENERIC

  redis:
    client-type: lettuce
    lettuce:
      pool:
        enabled: true
        min-idle: 8
        max-idle: 50
        max-active: 300

  #线程池配置
  task:
    execution:
      pool:
        core-size: 200

    #调度器线程
    scheduling:
      pool:
        size: 100

  # spring.mvc.date-format和spring.jackson.date-format区别
  #  当Content-Type 为 application/json，dispatcherServlet会使用jackson的MessageConvert，里面解析json的convert为jackson的配置
  #
  #  @JsonFormat(优先级高)  或  spring.jackson.date-format
  #
  #  当Content-Type 为 application/x-www-form-urlencoded（普通表单上传），使用的是ModelAttributeMethodProcessor ，使用的是mvc自己的配置
  #  spring.mvc.date-format(优先级高) 或 @DatetimeFormat
  jackson:
    #date-format: yyyy-MM-dd HH:mm:ss
    date-format: com.levin.commons.format.DefaultDateFormat
    time-zone: GMT+8
    locale: zh_CN

  # 数据源配置
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    druid: #单独使用druid时的配置
      initial-size: 50
      max-active: 500
      min-idle: 10
      max-wait: 60000
      min-evictable-idle-time-millis: 1800000
      max-evictable-idle-time-millis: 1800000
      time-between-eviction-runs-millis: 0
      validation-query: select 1
      validation-query-timeout: 60000
      test-on-borrow: false
      test-on-return: false
      test-while-idle: true
      filters: config,stat,wall

#      配置是否对数据库密码进行加密，
#      加密工具：  java -cp druid-xx.jar com.alibaba.druid.filter.config.ConfigTools 你的密码
#      config.decrypt=true/false 表示是否对密码进行解密
      connection-properties: ${r"config.decrypt=false;config.decrypt.key=${public-key};"}

      stat-view-servlet:
        loginUsername: admin
        loginPassword: 123456
        enabled: true
        url-pattern: /druid/*
        allow: " "

    ####################### 动态数据源 dynamic-datasource ###############################
    # 多数据源配置 https://gitee.com/baomidou/dynamic-datasource-spring-boot-starter
    # @DS 可以注解在方法上或类上，同时存在就近原则 方法上注解 优先于 类上注解。
    # @DS("slave_1")

    dynamic:
      enabled: true #启用动态数据源，默认true
      primary: master #设置默认的数据源或者数据源组,默认值即为master
      strict: false #严格匹配数据源,默认false. true未匹配到指定数据源时抛异常,false使用默认数据源
      grace-destroy: false #是否优雅关闭数据源，默认为false，设置为true时，关闭数据源时如果数据源中还存在活跃连接，至多等待10s后强制关闭
      datasource:
        master:
          url: jdbc:mysql://xx.xx.xx.xx:3306/dynamic
          username: root
          password: 123456
          driver-class-name: com.mysql.jdbc.Driver # 3.2.0开始支持SPI可省略此配置
        slave_1:
          url: jdbc:mysql://xx.xx.xx.xx:3307/dynamic
          username: root
          password: 123456
          driver-class-name: com.mysql.jdbc.Driver
        slave_2:
          url: ENC(xxxxx) # 内置加密,使用请查看详细文档
          username: ENC(xxxxx)
          password: ENC(xxxxx)
          driver-class-name: com.mysql.jdbc.Driver
        #......省略
        #以上会配置一个默认库master，一个组slave下有两个子库slave_1,slave_2

  #JPA配置
  jpa:
    show-sql: false
    #    generate-ddl: false
    #    database: H2
    #关闭视图事务，避免jpa 出现 N + 1 查询
    open-in-view: false
    hibernate:
      #jdbc 批量操作，提升性能
      jdbc:
        batch_size: 512
        fetch_size: 512
        order_inserts: true
        order_updates: true

      ddl-auto: update
#      实体@GeneratedValue()ID生成策略自动时，会根据数据库自动选择
      use-new-id-generator-mappings: false

      naming:
        #模块表名前缀映射类，重要
        physical-strategy: com.levin.commons.dao.support.EntityNamingStrategy

  #      MYSQL 配置选项
        properties:
          hibernate.id.new_generator_mappings: false

####################### lock4j ###############################
###  https://gitee.com/baomidou/lock4j
# 配置全局默认的获取锁超时时间和锁过期时间。
#    //完全配置，支持spel
#    @Lock4j(keys = {"#user.id", "#user.name"}, expire = 60000, acquireTimeout = 1000)
#    public User customMethod(User user) {
#        return user;
#    }

# 指定时间内不释放锁(限流)
#    // 用户在5秒内只能访问1次
#    @Lock4j(keys = {"#user.id"}, acquireTimeout = 0, expire = 5000, autoRelease = false)
#    public Boolean test(User user) {
#        return "true";
#    }

lock4j:
  acquire-timeout: 3000 #默认值3s，可不设置
  expire: 30000 #默认值30s，可不设置
#  primary-executor: com.baomidou.lock.executor.RedisTemplateLockExecutor #默认redisson>redisTemplate>zookeeper，可不设置
  lock-key-prefix: lock4j #锁key前缀, 默认值lock4j，可不设置


############################### j2cache #######################################
j2cache:
  #  config-location: /j2cache.properties
  #  开启对spring cache 的支持
  open-spring-cache: true

  #  缓存清除模式
  #  active:主动清除，二级缓存过期主动通知各节点清除，优点在于所有节点可以同时收到缓存清除
  #  passive:被动清除，一级缓存过期进行通知各节点清除一二级缓存
  #  blend:两种模式一起运作，对于各个节点缓存准确性以及及时性要求高的可以使用（推荐使用前面两种模式中一种）
  cache-clean-mode: passive

  #尽量不要允许空值，虽然会导致缓存不命中，但是可以避免数据更新问题
  allow-null-values: false
  default_cache_null_object: false

  redis-client: lettuce #指定redis客户端使用lettuce，也可以使用Jedis

  l2-cache-open: true #开启二级缓存

  #SpringJ2CacheConfigUtil
  sync_ttl_to_redis: false

  #序列化方法，参考SerializationUtils类 fst, json
  serialization: fastjson

  #广播器
  broadcast: net.oschina.j2cache.cache.support.redis.SpringRedisPubSubPolicy
  #  broadcast: jgroups
  L1: #指定一级缓存提供者为caffeine
    provider_class: caffeine

  L2: #指定二级缓存提供者为redis
    provider_class: net.oschina.j2cache.cache.support.redis.SpringRedisProvider
    config_section: lettuce

caffeine:
  properties: /caffeine.properties   # 这个配置文件需要放在项目中

lettuce:
  mode: single
  namespace:
  storage: generic
  channel: j2cache
  scheme: redis
  hosts: ${r"${spring.redis.host:localhost}:${spring.redis.port:6379}"}
  password: ${r"${spring.redis.password:}"}
  database: ${r"${spring.redis.database:0}"}
  sentinelMasterId:
  maxTotal: 100
  maxIdle: 10
  minIdle: 10
  timeout: 10000


############## Sa-Token 配置 (文档: https://sa-token.cc) ##############
sa-token:
  # token 名称（同时也是 cookie 名称）
  token-name: Authorization
  # token 有效期（单位：秒） 默认30天，-1 代表永久有效
  timeout: 2592000
  # token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认-1 代表不限制，永不冻结
  active-timeout: -1
  # 是否允许同一账号多地同时登录 （为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）
  is-concurrent: true
  # 在多人登录同一账号时，是否共用一个 token （为 true 时所有登录共用一个 token, 为 false 时每次登录新建一个 token）
  is-share: true
  # token 风格（默认可取值：uuid、simple-uuid、random-32、random-64、random-128、tik）
  token-style: uuid
  # 是否输出操作日志
  is-log: true

<#if enableDubbo>
#dubbo 配置
dubbo:
  application:
    name: dubbo-${moduleName}
  protocol:
    name: tri
    port: -1
    ext-protocol: dubbo,
  registry:
#    address: ${r"zookeeper://${zookeeper.address:127.0.0.1}:2181"}

  provider:
    # ① 如果异常类和接口类在同一个 jar 包中，那么不会走封装的逻辑，会直接返回；
    # ② 如果异常类是以 java. 或者 javax. 开头的那么也会直接抛出。
    # ③ 如果异常类和接口类不在同一个 jar 包中，那么会走封装的逻辑，会将异常类包装成一个 RuntimeException 并抛出。
    filter: -exception

</#if>
#日志配置
logging:
  level:
    root: warn
    com.levin: info
    ${modulePackageName}: debug

<#if enableOakBaseFramework>
# 插件系统配置
plugin:
  com:
    levin:
      oak:
        base:
          framework:
            admin-path: /admin
            editor-path: /editor
            api-doc-path: /api-docs

            #租户绑定域名的配置，默认启用，并且拦截所有的路径
            tenantBindDomain:
              enable: true

            #access log 配置，默认启用，并且拦截所有的路径
            log:
              enable: true

            # IP 地址白名单访问控制，默认启用，并且拦截所有的路径
            url-acl:
              enable: true
              onlyControllerMethod: true
              useWebFilter: true
              include-path-patterns: /**/api/**

            sign:
              #签名，验签规则:md5(Utf8(clientId +  channelCode + clientSecret + timestamp + nonceStr ))
              enable: false
              #默认所有的api路径都需要签名
              include-path-patterns: /**/api/**

            #静态资源访问控制列表
            resources-acl:
              - includePathPatterns: "/templates/com.levin.oak.base/**"
                denied: true

            # 是否开启登录验证码
            enableLoginVerificationCode: true

            enable-mock-sms-send: true

            enableSmsVerificationCode: false

</#if>