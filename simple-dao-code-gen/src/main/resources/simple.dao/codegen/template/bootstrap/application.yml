#@author Auto gen by simple-dao-codegen, @time: ${.now}, 代码生成哈希校验码：[]，请不要修改和删除此行内容。
#
spring:
  application:
    name: ${moduleName}

  main:
    #允许Spring Bean循环应用
    allow-circular-references: true

  #文件上传限制
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 100MB

  cache:
    type: redis

  redis:
    client-type: lettuce
    lettuce:
      pool:
        enabled: true
        min-idle: 8
        max-idle: 50
        max-active: 300

  #线程池配置
  task:
    execution:
      pool:
        core-size: 200

    #调度器线程
    scheduling:
      pool:
        size: 100

  # spring.mvc.date-format和spring.jackson.date-format区别
  #  当Content-Type 为 application/json，dispatcherServlet会使用jackson的MessageConvert，里面解析json的convert为jackson的配置
  #
  #  @JsonFormat(优先级高)  或  spring.jackson.date-format
  #
  #  当Content-Type 为 application/x-www-form-urlencoded（普通表单上传），使用的是ModelAttributeMethodProcessor ，使用的是mvc自己的配置
  #  spring.mvc.date-format(优先级高) 或 @DatetimeFormat
  jackson:
    #date-format: yyyy-MM-dd HH:mm:ss
    date-format: com.levin.commons.format.DefaultDateFormat
    time-zone: GMT+8
    locale: zh_CN

  # 数据源配置
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    druid: #单独使用druid时的配置
      initial-size: 50
      max-active: 500
      min-idle: 10
      max-wait: 60000
      min-evictable-idle-time-millis: 1800000
      max-evictable-idle-time-millis: 1800000
      time-between-eviction-runs-millis: 0
      validation-query: select 1
      validation-query-timeout: 60000
      test-on-borrow: false
      test-on-return: false
      test-while-idle: true
      filters: config,stat,wall

#      配置是否对数据库密码进行加密，
#      加密工具：  java -cp druid-xx.jar com.alibaba.druid.filter.config.ConfigTools 你的密码
#      config.decrypt=true/false 表示是否对密码进行解密
      connection-properties: ${r"config.decrypt=false;config.decrypt.key=${public-key};"}

      stat-view-servlet:
        loginUsername: admin
        loginPassword: 123456
        enabled: true
        url-pattern: /druid/*
        allow: " "

  #    url: jdbc:h2:./dev.db;MODE=MySQL;
  #    url: jdbc:h2:mem:dev.db;
  #    username: dev
  #    password: dev

  #JPA配置
  jpa:
    show-sql: false
    #    generate-ddl: false
    #    database: H2
    #关闭视图事务，避免jpa 出现 N + 1 查询
    open-in-view: false
    hibernate:
      #jdbc 批量操作，提升性能
      jdbc:
        batch_size: 512
        fetch_size: 512
        order_inserts: true
        order_updates: true

      ddl-auto: update
#      实体@GeneratedValue()ID生成策略自动时，会根据数据库自动选择
      use-new-id-generator-mappings: false

      naming:
        #模块表名前缀映射类，重要
        physical-strategy: com.levin.commons.dao.support.EntityNamingStrategy

  #      MYSQL 配置选项
        properties:
          hibernate.id.new_generator_mappings: false

############## Sa-Token 配置 (文档: https://sa-token.cc) ##############
sa-token:
  # token 名称（同时也是 cookie 名称）
  token-name: Authorization
  # token 有效期（单位：秒） 默认30天，-1 代表永久有效
  timeout: 2592000
  # token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认-1 代表不限制，永不冻结
  active-timeout: -1
  # 是否允许同一账号多地同时登录 （为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）
  is-concurrent: true
  # 在多人登录同一账号时，是否共用一个 token （为 true 时所有登录共用一个 token, 为 false 时每次登录新建一个 token）
  is-share: true
  # token 风格（默认可取值：uuid、simple-uuid、random-32、random-64、random-128、tik）
  token-style: uuid
  # 是否输出操作日志
  is-log: true

#dubbo 配置
dubbo:
  application:
    name: dubbo-${moduleName}
  protocol:
    name: tri
    port: -1
    ext-protocol: dubbo,
  registry:
#    address: ${r"zookeeper://${zookeeper.address:127.0.0.1}:2181"}

  provider:
    # ① 如果异常类和接口类在同一个 jar 包中，那么不会走封装的逻辑，会直接返回；
    # ② 如果异常类是以 java. 或者 javax. 开头的那么也会直接抛出。
    # ③ 如果异常类和接口类不在同一个 jar 包中，那么会走封装的逻辑，会将异常类包装成一个 RuntimeException 并抛出。
    filter: -exception


#日志配置
logging:
  level:
    root: warn
    com.levin: info
    ${modulePackageName}: debug
